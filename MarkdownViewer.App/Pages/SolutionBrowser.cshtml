@page
@model MarkdownViewer.App.Pages.SolutionBrowserModel
@{
    ViewData["Title"] = "Classes";
}

<div class="row">
    <div class="col-3">
        <form method="get">
            <select name="SolutionName" class="form-control" onchange="this.form.submit()" required="required" asp-items="Model.SolutionSelect">
                <option value="">(solution)</option>
            </select>

            <select name="AssemblyName" class="form-control" onchange="this.form.submit()" asp-items="Model.AssemblySelect">
                <option value="">(assembly)</option>
            </select>
        </form>

        @if (Model.SolutionInfo != null)
        {
            foreach (var nsGrp in Model.SolutionInfo.Classes.Where(c => Model.ClassFilter.Invoke(c)).GroupBy(ci => ci.Namespace))
            {
                <h2>@Model.ShortNamespaces[nsGrp.Key]</h2>
                <ul>
                @foreach (var classInfo in nsGrp.GroupBy(ci => ci.Name).Select(grp => grp.First()))
                {
                    <li class="mb-2">
                        <button class="btn btn-outline-info loadMarkdown"
                            data-class-name="@classInfo.Name"
                            data-assembly-name="@classInfo.AssemblyName"
                            data-namespace="@classInfo.Namespace"
                            data-solution-name="@Model.SolutionName">@classInfo.Name</button>
                    </li>
                }
                </ul>
            }
        }
        else
        {
            <p>please choose a solution</p>
        }
    </div>

    <div class="col-9 border-left">
        <button class="btn btn-secondary clipboard-copy mb-2" data-clipboard-target="#markdownOutput">Copy</button>
<pre id="markdownOutput">

</pre>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js"></script>
    <script type="text/javascript">
        new ClipboardJS('.clipboard-copy');

        document.querySelectorAll('.loadMarkdown').forEach(function (ele) {
            ele.addEventListener('click', function (ev) {
                //console.log($(ev.target).data('class-name'));

                let button = $(ev.target);
                let params = new URLSearchParams();
                params.append('Solution', button.data('solution-name'));
                params.append('Namespace', button.data('namespace'));
                params.append('Assembly', button.data('assembly-name'));
                params.append('ClassName', button.data('class-name'));

                fetch('/Markdown?' + params.toString(), {
                    method: 'get'                    
                }).then(function (response) {
                    return response.text();
                }).then(function (content) {
                    var output = document.getElementById('markdownOutput');
                    output.textContent = content;
                });
            });
        })
    </script>
}